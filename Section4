Rendering a home page view
Lecture 1:
Entry point at main.js::
--In client/main.js, we import the root or top-level React component that
will contain the whole frontend and render it to the div element with the 'root' ID
specified in the HTML document in template.js.

Root React component::
--The top-level React component that will contain all the components for the
application's frontend is defined in the client/App.js
--we customize the UI to have material UI, routing and ensure tht  React Hot Loader
can instantly load changes as we develop the components.

Customizing the Material-UI theme::
--The Material-UI theme can be easily customized using the ThemeProvider
component. It can also be used to configure the custom values of theme variables in
createMuiTheme()

Wrapping the root component with ThemeProvider
and BrowserRouter::
--The custom React components that we will create to make up the user interface will
be accessed with the frontend routes specified in the MainRouter component.

Marking the root component as hot-exported::
-this is to enable live reloading of our component

Lecture 2:
Adding a home route to MainRouter::
--The MainRouter.js code will help render our custom React components with
respect to the routes or locations in the application.
--in the MainRouter.js

--As we develop more view components, we will update the MainRouter and add
routes for the new components inside the Switch component.

--The Switch component in React Router renders a route exclusively.
In other words, it only renders the first child that matches the
requested route path. On the other hand, without being nested in a
Switch, every Route component renders inclusively when there is a
path match; for example, a request at '/' also matches a route at
'/contact'.

Lecture 3:
The Home component::
-the view components will follow a code structure
***Imports of libraries, modules, and files needed to construct the component
***Style declarations to define the specific CSS styles for the component
elements
***A function that defines the React component

Imports:
Style declarations:
--we will use react hooks for this.
hooks enable us handle state without neccesarily using class based components bt function 
based components
 
Lecture 4:
Component definition::
--The Home component will contain a Material-UI Card
with a headline, an image, and a caption, all styled with the styles we defined
previously and returned by calling the useStyles() hook.

--Throughout this book, we will define all our React components as
functional components. We will utilize React Hooks, which is a new
addition to React, to add state and life cycle features, instead of
using class definitions to achieve the same.

Lecture 5:
Bundling image assets
--The static image file that we imported into the Home component view must also be
included in the bundle with the rest of the compiled JS code so that the code can
access and load it.

--Update the webpack.config.client.js, webpack.config.server.js, and
webpack.config.client.production.js

install the node modules for file-Loader
******yarn add --dev file-loader***

Running and opening in the browser::
run
*****yarn development***
http://localhost:8080)

Lecture 6:
Integrating backend APIs::
--Users should be able to use the frontend views to fetch and modify user data in the
database based on authentication and authorization. To implement these
functionalities, the React components will access the API endpoints that are exposed
by the backend using the Fetch API

Fetch for user CRUD;;
--In the client/user/api-user.js file, we will add methods for accessing each of
the user CRUD API endpoints, which the React components can use to exchange user
data with the server and database as required

Creating new User::
--The create method will take user data from the view component, which is where we
will invoke this method. Then, it will use fetch to make a POST call at the create API
route, '/api/users', to create a new user in the backend with the provided data

