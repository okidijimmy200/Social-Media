Lecture 1:
Posting on Mern Social
--The post feature in MERN Social will allow users to share content on the MERN
Social application platform and also interact with each other over the content by
commenting on or liking a post,

--we will implement a complete full-stack slice containing the post
backend and frontend

--The post backend will be comprised of a new Mongoose
model for structuring the post data to be stored in the database, while the post CRUD
API endpoints will allow the frontend to interact with the Post collection in the
database.

--The post frontend will consist of post-related React components that will
allow users to view posts, add new posts, interact with posts, and delete their own
posts.

Lecture 2:
Mongoose schema model for Post::
---To define the structure for storing details about each post and to store each post as a
document in a collection in MongoDB, we will define the Mongoose schema for a post
in server/models/post.model.js. The Post schema will store a post's text content,
a photo, a reference to the user who posted, time of creation, likes on the post from
users, and comments on the post by users.

Lecture 3:
The Newsfeed component::
--each user will see posts that have been shared by people they
follow, along with posts that they themselves share, all aggregated in a Newsfeed
view.
---we will look at the composition of this Newsfeed view to showcase a
basic example of how to design nested UI components that share state. The Newsfeed
component will contain two main child components â€“ a new post form and a list of
posts from followed users

Lecture 4:
Listing posts::
--In MERN Social, we list posts in the Newsfeed and in the profile of each user. We will
create a generic PostList component that will render any list of posts provided to it,
which we can use in both the Newsfeed and the Profile components.
in the postList.js file

Listing posts in Newsfeed
--We will set up an API on the server that queries the Post collection and returns a list
of posts from the people a specified user is following.

Newsfeed API for posts::
--we need to add the route endpoint that will
receive the request for Newsfeed posts and respond accordingly to the requesting
client- side.

--On the backend, we need to define the route path that will receive the request for
retrieving Newsfeed posts for a specific user,
--In the query to the Post collection, we find all the posts that have postedBy user
references that match the current user's followings and the current user. The posts
that are returned will be sorted by the created timestamp,

Lecture 5:
Fetching Newsfeed posts in the view
--Newsfeed API in the frontend to fetch the related posts and display
these posts in the Newsfeed view.

Lecture 6:
Listing posts by user in Profile
---The implementation of getting a list of posts created by a specific user and showing it
in Profile will be similar to what we discussed in the previous section regarding
listing posts in the Newsfeed.

API for posts by a user::
---To retrieve posts that have been shared by a specific user, we need to add a route
endpoint that will receive the request for these posts and respond accordingly to the
requesting client- side.

Fetching user posts in the view::
--We will use the list-posts-by-user API in the frontend to fetch the related posts and
display these posts in the profile view.

--In the Profile component, the loadPosts method will be called with the user ID of
the user whose profile is being loaded, after the user details have been fetched from
the server in the useEffect() hook function

