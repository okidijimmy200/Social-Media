Adding a React Frontend to Complete MERN
--we will cover
Frontend features of the skeleton
--Setting up development with React, React Router, and Material-UI
--Rendering a home page built with React
--Backend user API integration
--Auth integration for restricted access
--User list, profile, edit, delete, sign up, and sign in UI to complete the user
frontend
--Basic server-side rendering

Lecture 1:
Defining the skeleton application frontend:
***Home page: A view that renders at the root URL to welcome users to the
web application.
***Sign-up page: A view with a form for user sign-up, allowing new users to
create a user account and redirecting them to a sign-in page when
successfully created.

***Sign-in page: A view with a sign-in form that allows existing users to sign
in so they have access to protected views and actions.

***User list page: A view that fetches and shows a list of all the users in the
database, and also links to individual user profiles.

***Profile page: A component that fetches and displays an individual user's
information. This is only accessible by signed-in users and also contains
edit and delete options, which are only visible if the signed-in user is
looking at their own profile.

***Edit profile page: A form that fetches the user's information to prefill the
form fields. This allows the user to edit the information and this form is
accessible only if the logged-in user is trying to edit their own profile.

***Delete user component: An option that allows the signed-in user to delete
their own profile after confirming their intent.

***Menu navigation bar: A component that lists all the available and relevant
views to the user, and also helps to indicate the user's current location in
the application.

--mainROuter will be the main React component wch contains other react views eg Home, Signup
,Users, Profile and EditProfile
--menu component will render across all the views. DeleteUser will be a part of the profie view

Lecture 2;
Folder and file structure:
--The client folder will contain the React components, helpers, and frontend assets,
such as images and CSS

Setting up for React development:
--we will add frontend configuration for Babel, Webpack, and React
Hot Loader to compile, bundle, and hot reload the code.

--backend in one
command to make the development flow simple. Then, we will update the code
further so that it serves the bundled code from the server when the application runs
in the browser.

Lecture 3:
Configuring Babel and Webpack:;
--we will update the configuration for babel and Webpack
--then configure the express app to initiate frontend and backend code bundling in one command

Babel:
install Babel react preset module
********yarn add --dev @babel/preset-react*******

Webpack:
--To bundle client-side code after compiling it with Babel, and also to enable reacthot-
loader for faster development

-***********yarn add -dev webpack-dev-middleware webpack-hot-middleware fileloader**********

***********yarn add react-hot-loader @hot-loader/react-dom******

--configure webpack for frontend developemnt and build the production bundle
add a webpack.config.client.js file and a webpack.config.client.production.js file with the same configuration code
we described in Chapter 2,

Lecture 3:
Loading Webpack middleware for development:
--During development, when we run the server, the Express app should also load the
Webpack middleware that's relevant to the frontend with respect to the configuration
that's been set for the client-side code, so that the frontend and backend development
workflow is integrated.
--we use the devBundle.js file for this wch sets up a compile method takes the express app and configures it to
the webpack middleware

***yarn add webpack-dev-middleware*******

--call the compile in the expressjs



*******yarn add webpack-hot-middleware******

middleware, along with
the client-side Webpack configuration. Then, it will initiate Webpack to compile and
bundle the client-side code and also enable hot reloading.


The bundled code will be placed in the dist folder. This code will be needed to
render the views. Next, we will configure the Express server app so that it serves the
static files from this dist folder. This will ensure that the bundled React code can be
loaded in the browser.

Loading bundled frontend code:
--The frontend views that we will see rendered in the browser will load from the
bundled files in the dist folder. For it to be possible to add these bundled files to the
HTML view containing our frontend, we need to configure the Express app so that it
serves static files, which are files that aren't generated dynamically by server-side
code.

Serving static files with Express:
--we will configure express to serve static files from the dist folder

Lecture 4:
Updating the template to load a bundled script:
--we update the template.js file so that it adds the script file from the dist folder to the
end of the <body> tag.

This script tag will load our React frontend code in the browser when we visit the
root URL '/' with the server running.

Adding React dependencies::
--we will use react, react-router and Material UI

--install react
*******yarn add react react-dom*******

--install react-router
*******yarn add react-router react-router-dom******

--Material UI
*******yarn add @material-ui/core @material-ui/icons*****

--add roboto fonts and material UI icons



