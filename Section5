Lecture 1:
Fetch for the auth API::
In order to integrate the auth API endpoints from the server with the frontend React
components, we will add methods for fetching sign-in and sign-out API endpoints in
the client/auth/api-auth.js file.

Sign-in::
--The signin method will take user sign-in data from the view component, then use
fetch to make a POST call to verify the user with the backend.
---The component invoking this method
needs to handle the response appropriately, such as storing the received JWT locally
so it can be used when making calls to other protected API routes from the frontend.

Sign-Out::
--signout uses fetch to make a GET
call to the signout API endpoint on the server.

***With these API fetch methods added, the React frontend has complete access to the
endpoints we made available in the backend.

Lecture 2:
Adding auth in the frontend:
---implementing authentication with JWT
relinquishes responsibility to the client-side to manage and store user auth state. To
this end, we need to write code that will allow the client-side to store the JWT that's
received from the server on successful sign-in, make it available when accessing
protected routes, delete or invalidate the token when the user signs out, and also
restrict access to views and components on the frontend based on the user auth state

--Using examples of the auth workflow from the React Router documentation, in the
following sections, we will write helper methods to manage the auth state across the
components, and also use a custom PrivateRoute component to add protected
routes to the frontend of the MERN skeleton application

Lecture 3:
Managing auth state::
--To manage auth state in the frontend of the application, the frontend needs to be able
to store, retrieve, and delete the auth credentials that are received from the server on
successful user sign in.

--we will use the browser's
sessionsStorage as the storage option to store the JWT auth credentials.

NB:
Alternatively, you can use localStorage instead of
sessionStorage to store the JWT credentials. With
sessionStorage, the user auth state will only be remembered in
the current window tab. With localStorage, the user auth state
will be remembered across tabs in a browser.

Saving credentials::
--It stores the credentials in sessionStorage after
ensuring window is defined, in other words ensuring this code is running in a
browser and hence has access to sessionStorage.

--it executes the callback
function that is passed in. This callback will allow the component – in our case, the
component where sign-in is called – to define actions that should take place after
successfully signing in and storing credentials. Next, we will discuss the method that
lets us access these stored credentials.

Retrieving Credentials:
--we will need to retrieve the stored credentials to check if
the current user is signed in.

Deleting credentials::
--When a user successfully signs out from the application, we want to clear the stored
JWT credentials from sessionStorage

Lecture 4:
The PrivateRoute component::
--declaring protected routes for the frontend to restrict view access based on user auth

Lecture 5:
Completing the User frontend::
--here we will complete the view, create modify user data stored in the db wit resp to auth restrictions

**Users: To fetch and list all users from the database to the view
**Signup: To display a form that allows new users to sign up
**Signin: To display a form that allows existing users to sign in
**Profile: To display details for a specific user after retrieving from the
database
*EditProfile: To display details for a specific user and allow authorized
user to update these details
**DeleteUser: To allow an authorized user to delete their account from the
application
**Menu: To add a common navigation bar to each view in the application

The Users component::
--that have been fetched from the database and links each name to the user profile. The
following component can be viewed by any visitor to the application and will render
at the '/users' route:

--The argument that's passed to useState
is the initial value of this variable – in other words, the initial state. Invoking
useState returns the current state and a function that updates the state value, which
is similar to this.setState in a class definition.
With the users state initialized, next, we will use another built-in React hook named
useEffect to fetch a list of users from the backend and update the users value in
the state.

--To add this Users component to the React application, we need to update the
MainRouter component with a Route that renders this component at the
'/users' path.

Lecture 6:
The Signup component::
--client/user/Signup.js presents a form with name,
email, and password fields to the user for sign-up at the '/signup' path, as
displayed in the following screenshot:

Lecture 7:
The Signin component::
--this is similar to the signup component
--The key difference is
in the implementation of redirection after a successful sign-in and storing the received
JWT credentials
--For redirection, we will use the Redirect component from React Router. First,
initialize a redirectToReferrer value to false in the state with the other fields:

Lecture 8:
The Profile component::
--The Profile component in client/user/Profile.js shows a single user's
information in the view at the '/user/:userId' path, where the userId parameter
represents the ID of the specific user. The completed Profile will display user
details, and also conditionally show edit/delete options.

--This profile information can be fetched from the server if the user is signed in. To
verify this, the component has to provide the JWT credential to the read fetch call;
otherwise, the user should be redirected to the Sign In view.

--Once the server responds, either the state is updated with the user information or the
view is redirected to the Sign In view if the current user is not authenticated

--However, if the user that's currently signed in is viewing their own profile, they will
be able to see edit and delete options in the Profile component, as shown in the
following screenshot: